npm install
install nodemon -D

//const params = request.query - retorna todos os parametros query enviados na requisição = ?name='teste'
//const params = request.params - retorna todos os route params  enviados na requisição = /:id
                //request.body

Driver = Select * from table
Query Builder = table('users').select('*').where()   (é melhor pois caso eu mude de banco n preciso mudar query)
Query Builder Knex{
    npm install Knex
    npm install sqlite3
    npx knex init

    npx knex migrate:make create_ongs
    npx knex migrate:latest
    npx knex migrate:rollback
    npx knex migrate:status
}


//o Id da ong vai ser string, pois será um id customizado
//pois deixar numero autoincremental torna facil descobrir outros
//ids


npx serve para executar um pacote ao inves de instalar
pacote crypto ja vem no node

npm install axios

--------
valdações:    joi(validação para JS)
celebrate integra joi com express

npm install celebrate

{usado no arquivo route / indexjs}
-no routes, posso usar mais de uma valdação (juntar diferentes, separando por virgula)
-validação em rotas em que algum paramentro/informação
venha do usuário

evitar erros 500, pois reflete que a aplicação nao soube como se comportar:
importar erros no index.js do server

npm install jest -D
npx jest --init
npm test

Criar BD para testes, para n alterar em ambiente produtivo
alteração no knex file, criar nova conexão para testes

npm install cross-env
ao rodar o script de test vamos ter uma var de ambiente (setada la no package.json)
alteração no connection.js


Para fazer as requisições de test, chamando a api:
npm install supertest -D   (apenas para dev)

cria arquivo server js (se eu for testar o app vai subir na porta de prod, e n quero
para isso dividi o  index.js em (app.js e server js, para apenas a aplicação normal chamar o server
a de tests so vai chamar app))




